package regressionTestPack;

import items.Fists;
import junit.framework.TestCase;

public class WeaponTest extends TestCase {
	private Fists fists;
	protected void setUp() throws Exception {
		super.setUp();
		fists = new Fists();
	}
	/**
	 * Tests all the functionality in the Weapon class
	 *
	 */
	public void testWeapon(){
		assertEquals(true, Fists.MIN_DAMAGE_VALUE == fists.getMinDamageValue() );
		assertEquals(true, Fists.MAX_DAMAGE_VALUE == fists.getMaxDamageValue() );
		for(int i=0;i<20;i++){
			assertEquals(true, fists.attack() <= Fists.MAX_DAMAGE_VALUE );
			System.out.println(fists.attack());
			assertEquals(true, fists.attack() >= Fists.MIN_DAMAGE_VALUE );
		}
		/*
		 * Test if can get Max Damage value sometime.,,,
		 */
		boolean gotvalue = false;
		for(int j = 0 ; j < 100000;j++){
			if(fists.attack() == Fists.MAX_DAMAGE_VALUE){
				gotvalue = true;
			}
		}
		assertEquals(true,gotvalue);
		
		/*
		 * Test if can get Min Damage value sometime.,,,
		 */
		gotvalue = false;
		for(int j = 0 ; j < 100000;j++){
			if(fists.attack() == Fists.MIN_DAMAGE_VALUE){
				gotvalue = true;
			}
		}
		assertEquals(true,gotvalue);
		
		
	}
	/**
	 * Tests specific for the Fist class
	 *
	 */
	public void testFists(){
		assertEquals(true, 0 == fists.getSellValue() );
		assertEquals(true, 0 == fists.getPurchaseValue() );
		assertEquals(false, fists.isDropable());
		assertEquals(false, fists.isSellable());
		
	}
}
